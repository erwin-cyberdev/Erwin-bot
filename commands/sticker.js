// commands/sticker.js - Convertit image/vid√©o en sticker
import fs from 'fs/promises'
import path from 'path'
import { Sticker, StickerTypes } from 'wa-sticker-formatter'
import { downloadMediaMessage } from '@whiskeysockets/baileys'

const TEMP_DIR = path.resolve('./tmp/stickers')
const MAX_IMAGE_BYTES = 1024 * 1024 // 1MB
const MAX_VIDEO_BYTES = 2 * 1024 * 1024 // 2MB

async function ensureTempDir() {
  try {
    await fs.mkdir(TEMP_DIR, { recursive: true })
  } catch {}
}

export default async function (sock, msg) {
  const from = msg.key.remoteJid

  try {
    let mediaMsg = null
    let mediaType = null

    // 1. V√©rifier si c'est une r√©ponse √† un message
    if (msg.message?.extendedTextMessage?.contextInfo?.quotedMessage) {
      const quotedMsg = msg.message.extendedTextMessage.contextInfo.quotedMessage
      
      // Image quot√©e
      if (quotedMsg.imageMessage) {
        mediaMsg = { message: { imageMessage: quotedMsg.imageMessage }, key: msg.key }
        mediaType = 'image'
      }
      // Vid√©o quot√©e
      else if (quotedMsg.videoMessage) {
        mediaMsg = { message: { videoMessage: quotedMsg.videoMessage }, key: msg.key }
        mediaType = 'video'
      }
      // Sticker quot√© (pour convertir en image)
      else if (quotedMsg.stickerMessage) {
        mediaMsg = { message: { stickerMessage: quotedMsg.stickerMessage }, key: msg.key }
        mediaType = 'sticker'
      }
    }
    // 2. V√©rifier si le message contient directement une image
    else if (msg.message?.imageMessage) {
      mediaMsg = msg
      mediaType = 'image'
    }
    // 3. V√©rifier si le message contient directement une vid√©o
    else if (msg.message?.videoMessage) {
      mediaMsg = msg
      mediaType = 'video'
    }

    // Aucun m√©dia trouv√©
    if (!mediaMsg || !mediaType) {
      return await sock.sendMessage(from, {
        text: 'üñºÔ∏è *Cr√©ateur de Sticker*\n\n*Usage :*\n1. R√©ponds √† une image/vid√©o avec `.sticker`\n2. Envoie une image avec `.sticker` en l√©gende\n\n*Exemples :*\n‚Ä¢ R√©ponds √† une photo ‚Üí `.sticker`\n‚Ä¢ Envoie une photo avec l√©gende `.sticker`\n\nüí° Vid√©os max 10 secondes'
      }, { quoted: msg })
    }

    // V√©rifier dur√©e vid√©o (max 10s pour stickers)
    if (mediaType === 'video') {
      const videoMsg = mediaMsg.message.videoMessage
      const duration = videoMsg?.seconds || 0
      
      if (duration > 10) {
        return await sock.sendMessage(from, {
          text: '‚ö†Ô∏è La vid√©o est trop longue. Maximum 10 secondes pour un sticker.'
        }, { quoted: msg })
      }
    }

    await ensureTempDir()
    await sock.sendMessage(from, {
      text: '‚è≥ Cr√©ation du sticker en cours...'
    }, { quoted: msg })

    // T√©l√©charger le m√©dia
    const buffer = await downloadMediaMessage(
      mediaMsg,
      'buffer',
      {},
      {
        logger: console,
        reuploadRequest: sock.updateMediaMessage
      }
    )

    if (!buffer) {
      throw new Error('Impossible de t√©l√©charger le m√©dia')
    }

    if (mediaType === 'image' && buffer.length > MAX_IMAGE_BYTES) {
      return await sock.sendMessage(from, {
        text: '‚ùó Image trop volumineuse. Taille max 1MB pour les stickers.'
      }, { quoted: msg })
    }

    if (mediaType === 'video' && buffer.length > MAX_VIDEO_BYTES) {
      return await sock.sendMessage(from, {
        text: '‚ùó Vid√©o trop volumineuse. Taille max 2MB pour les stickers anim√©s.'
      }, { quoted: msg })
    }

    const tempPath = path.join(TEMP_DIR, `${Date.now()}-${Math.random().toString(36).slice(2)}.${mediaType === 'video' ? 'mp4' : 'webp'}`)

    try {
      await fs.writeFile(tempPath, buffer)

      const sticker = new Sticker(buffer, {
        pack: 'Erwin-Bot',
        author: 'Created by Erwin-Bot',
        type: mediaType === 'video' ? StickerTypes.FULL : StickerTypes.CROPPED,
        quality: mediaType === 'video' ? 40 : 60
      })

      const stickerBuffer = await sticker.toBuffer()

      await sock.sendMessage(from, {
        sticker: stickerBuffer
      }, { quoted: msg })

      await sock.sendMessage(from, {
        text: `‚úÖ *Sticker cr√©√© !*\n\nüé® Type : ${mediaType === 'image' ? 'Image' : 'Vid√©o anim√©e'}\nüì¶ Pack : Erwin-Bot`
      }, { quoted: msg })

    } finally {
      try { await fs.rm(tempPath, { force: true }) } catch {}
    }

  } catch (err) {
    console.error('Erreur .sticker:', err)

    let errorMsg = '‚ùó Impossible de cr√©er le sticker.'
    
    if (err.message?.includes('download')) {
      errorMsg = '‚ùó Erreur lors du t√©l√©chargement du m√©dia. R√©essaie.'
    } else if (err.message?.includes('format')) {
      errorMsg = '‚ùó Format de m√©dia non support√©. Utilise une image JPG/PNG ou vid√©o MP4.'
    } else if (err.message?.includes('size')) {
      errorMsg = '‚ùó Le fichier est trop volumineux. Max 1MB pour les images, 2MB pour les vid√©os.'
    } else if (err.message?.includes('10 seconds')) {
      errorMsg = '‚ùó La vid√©o d√©passe 10 secondes. Raccourcis-la avant de cr√©er un sticker.'
    }

    await sock.sendMessage(from, {
      text: errorMsg
    }, { quoted: msg })
  }
}
